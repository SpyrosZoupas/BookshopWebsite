// <auto-generated />
using BookshopWebsite.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookshopWebsite.Migrations
{
    [DbContext(typeof(BookshopDbContext))]
    [Migration("20230812172309_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookshopWebsite.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deathday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Age = 0,
                            Name = "J.R.R. Tolkien"
                        },
                        new
                        {
                            AuthorId = 2,
                            Age = 0,
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            AuthorId = 3,
                            Age = 0,
                            Name = "George Orwell"
                        },
                        new
                        {
                            AuthorId = 4,
                            Age = 0,
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            AuthorId = 5,
                            Age = 0,
                            Name = "Stephen King"
                        },
                        new
                        {
                            AuthorId = 6,
                            Age = 0,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            AuthorId = 7,
                            Age = 0,
                            Name = "Mark Twain"
                        },
                        new
                        {
                            AuthorId = 8,
                            Age = 0,
                            Name = "Harper Lee"
                        },
                        new
                        {
                            AuthorId = 9,
                            Age = 0,
                            Name = "Ernest Hemingway"
                        },
                        new
                        {
                            AuthorId = 10,
                            Age = 0,
                            Name = "Leo Tolstoy"
                        });
                });

            modelBuilder.Entity("BookshopWebsite.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<string>("NumberOfPages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 10m,
                            Title = "The fellowship of the ring"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 12m,
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 3,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 8m,
                            Title = "1984"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 4,
                            CategoryId = 2,
                            ImageUrl = "",
                            InStock = true,
                            Price = 9m,
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 5,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 11m,
                            Title = "The Shining"
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 6,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 7m,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            BookId = 7,
                            AuthorId = 7,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 9m,
                            Title = "The Adventures of Huckleberry Finn"
                        },
                        new
                        {
                            BookId = 8,
                            AuthorId = 8,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 10m,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            BookId = 9,
                            AuthorId = 9,
                            CategoryId = 1,
                            ImageUrl = "",
                            InStock = true,
                            Price = 8m,
                            Title = "The Old Man and the Sea"
                        },
                        new
                        {
                            BookId = 10,
                            AuthorId = 10,
                            CategoryId = 5,
                            ImageUrl = "",
                            InStock = true,
                            Price = 15m,
                            Title = "War and Peace"
                        });
                });

            modelBuilder.Entity("BookshopWebsite.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Mystery"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Biography"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "History"
                        });
                });

            modelBuilder.Entity("BookshopWebsite.Models.Book", b =>
                {
                    b.HasOne("BookshopWebsite.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookshopWebsite.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BookshopWebsite.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookshopWebsite.Models.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
